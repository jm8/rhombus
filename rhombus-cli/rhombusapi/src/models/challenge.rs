/*
 * 
 *
 * an example API
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Challenge {
    #[serde(rename = "author")]
    pub author: String,
    #[serde(rename = "category")]
    pub category: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "files")]
    pub files: Vec<models::ChallengeAttachment>,
    #[serde(rename = "flag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub flag: Option<Option<String>>,
    #[serde(rename = "healthscript", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub healthscript: Option<Option<String>>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "ticket_template", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ticket_template: Option<Option<String>>,
}

impl Challenge {
    pub fn new(author: String, category: String, description: String, files: Vec<models::ChallengeAttachment>, id: String, name: String) -> Challenge {
        Challenge {
            author,
            category,
            description,
            files,
            flag: None,
            healthscript: None,
            id,
            name,
            ticket_template: None,
        }
    }
}

